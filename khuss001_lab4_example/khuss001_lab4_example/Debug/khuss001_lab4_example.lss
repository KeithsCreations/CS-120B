
khuss001_lab4_example.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000140  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bee  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007fb  00000000  00000000  00000e22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000332  00000000  00000000  0000161d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000429  00000000  00000000  00001994  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000531  00000000  00000000  00001dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000022ee  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	50 c0       	rjmp	.+160    	; 0x13c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRD = 0xFF; PORTD = 0x00; // Initialize outputs
  9e:	8f ef       	ldi	r24, 0xFF	; 255
  a0:	8a b9       	out	0x0a, r24	; 10
  a2:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x00; PORTC = 0xFF;
  a4:	17 b8       	out	0x07, r1	; 7
  a6:	88 b9       	out	0x08, r24	; 8
	unsigned char tmpA = 0x00;
  a8:	80 e0       	ldi	r24, 0x00	; 0
		button_4 = ~PINC & 0x08;
		//tmpC = ((PINA & 0x0F));
		
		/*Setting the bits*/
		//PC0
		if ((button_1 | button_2 | button_3 | button_4) >= 0x0D){
  aa:	61 e0       	ldi	r22, 0x01	; 1
	unsigned char button_2 = 0x00;
	unsigned char button_3 = 0x00;
	unsigned char button_4 = 0x00;
	while (1)
	{
		button_1 = ~PINC & 0x01;
  ac:	26 b1       	in	r18, 0x06	; 6
		button_2 = ~PINC & 0x02;
  ae:	96 b1       	in	r25, 0x06	; 6
		button_3 = ~PINC & 0x04;
  b0:	46 b1       	in	r20, 0x06	; 6
		button_4 = ~PINC & 0x08;
  b2:	36 b1       	in	r19, 0x06	; 6
		//tmpC = ((PINA & 0x0F));
		
		/*Setting the bits*/
		//PC0
		if ((button_1 | button_2 | button_3 | button_4) >= 0x0D){
  b4:	90 95       	com	r25
  b6:	59 2f       	mov	r21, r25
  b8:	52 70       	andi	r21, 0x02	; 2
  ba:	94 2f       	mov	r25, r20
  bc:	90 95       	com	r25
  be:	94 70       	andi	r25, 0x04	; 4
  c0:	95 2b       	or	r25, r21
  c2:	30 95       	com	r19
  c4:	38 70       	andi	r19, 0x08	; 8
  c6:	93 2b       	or	r25, r19
  c8:	26 27       	eor	r18, r22
  ca:	21 70       	andi	r18, 0x01	; 1
  cc:	92 2b       	or	r25, r18
  ce:	9d 30       	cpi	r25, 0x0D	; 13
  d0:	f8 f0       	brcs	.+62     	; 0x110 <main+0x72>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d2:	81 60       	ori	r24, 0x01	; 1
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x0D){
			tmpA = SetBit(tmpA, 0, 0);
		}
		//PC1
		if ((button_1 | button_2 | button_3 | button_4) >= 0x0A){
  d4:	9a 30       	cpi	r25, 0x0A	; 10
  d6:	f0 f0       	brcs	.+60     	; 0x114 <main+0x76>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  d8:	82 60       	ori	r24, 0x02	; 2
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x0A){
			tmpA = SetBit(tmpA, 1, 0);
		}
		//PC2
		if ((button_1 | button_2 | button_3 | button_4) >= 0x07){
  da:	97 30       	cpi	r25, 0x07	; 7
  dc:	e8 f0       	brcs	.+58     	; 0x118 <main+0x7a>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  de:	84 60       	ori	r24, 0x04	; 4
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x07){
			tmpA = SetBit(tmpA, 2, 0);
		}
		//PC4
		if ((button_1 | button_2 | button_3 | button_4) >= 0x04){
  e0:	94 30       	cpi	r25, 0x04	; 4
  e2:	e0 f0       	brcs	.+56     	; 0x11c <main+0x7e>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e4:	80 61       	ori	r24, 0x10	; 16
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x04){
			tmpA = SetBit(tmpA, 4, 0);
		}
		//PC3
		if ((button_1 | button_2 | button_3 | button_4) >= 0x05){
  e6:	95 30       	cpi	r25, 0x05	; 5
  e8:	d8 f0       	brcs	.+54     	; 0x120 <main+0x82>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ea:	28 2f       	mov	r18, r24
  ec:	28 60       	ori	r18, 0x08	; 8
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x05){
			tmpA = SetBit(tmpA, 3, 0);
		}
		//PC5
		if ((button_1 | button_2 | button_3 | button_4) >= 0x01){
  ee:	91 11       	cpse	r25, r1
  f0:	22 c0       	rjmp	.+68     	; 0x136 <main+0x98>
  f2:	1a c0       	rjmp	.+52     	; 0x128 <main+0x8a>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f4:	80 64       	ori	r24, 0x40	; 64
		}
		if ((button_1 | button_2 | button_3 | button_4) > 0x04){
			tmpA = SetBit(tmpA, 6, 0);
		}
		//PC7
		if (GetBit(PINC, 4) && GetBit(PINC, 5) && ~(GetBit(PINC, 6)))
  f6:	34 9b       	sbis	0x06, 4	; 6
  f8:	04 c0       	rjmp	.+8      	; 0x102 <main+0x64>
  fa:	35 9b       	sbis	0x06, 5	; 6
  fc:	02 c0       	rjmp	.+4      	; 0x102 <main+0x64>
  fe:	96 b1       	in	r25, 0x06	; 6
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 100:	80 68       	ori	r24, 0x80	; 128
		//PC7
		if (GetBit(PINC, 4) && GetBit(PINC, 5) && ~(GetBit(PINC, 6)))
		{
			tmpA = SetBit(tmpA, 7, 1);
		}
		if ((GetBit(PINC, 4) && GetBit(PINC, 5) && ~(GetBit(PINC, 6))) == 0)
 102:	34 9b       	sbis	0x06, 4	; 6
 104:	14 c0       	rjmp	.+40     	; 0x12e <main+0x90>
 106:	35 9b       	sbis	0x06, 5	; 6
 108:	12 c0       	rjmp	.+36     	; 0x12e <main+0x90>
 10a:	96 b1       	in	r25, 0x06	; 6
		{
			tmpA = SetBit(tmpA, 7, 0);
		}
		PORTD = tmpA;
 10c:	8b b9       	out	0x0b, r24	; 11
	}
 10e:	ce cf       	rjmp	.-100    	; 0xac <main+0xe>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 110:	8e 7f       	andi	r24, 0xFE	; 254
 112:	e0 cf       	rjmp	.-64     	; 0xd4 <main+0x36>
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	e1 cf       	rjmp	.-62     	; 0xda <main+0x3c>
 118:	8b 7f       	andi	r24, 0xFB	; 251
 11a:	e2 cf       	rjmp	.-60     	; 0xe0 <main+0x42>
 11c:	8f 7e       	andi	r24, 0xEF	; 239
 11e:	e3 cf       	rjmp	.-58     	; 0xe6 <main+0x48>
 120:	87 7f       	andi	r24, 0xF7	; 247
 122:	28 2f       	mov	r18, r24
		}
		if ((button_1 | button_2 | button_3 | button_4) < 0x05){
			tmpA = SetBit(tmpA, 3, 0);
		}
		//PC5
		if ((button_1 | button_2 | button_3 | button_4) >= 0x01){
 124:	91 11       	cpse	r25, r1
 126:	05 c0       	rjmp	.+10     	; 0x132 <main+0x94>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 128:	82 2f       	mov	r24, r18
 12a:	8f 7d       	andi	r24, 0xDF	; 223
 12c:	e3 cf       	rjmp	.-58     	; 0xf4 <main+0x56>
 12e:	8f 77       	andi	r24, 0x7F	; 127
 130:	ed cf       	rjmp	.-38     	; 0x10c <main+0x6e>
 132:	80 62       	ori	r24, 0x20	; 32
 134:	df cf       	rjmp	.-66     	; 0xf4 <main+0x56>
 136:	8f 7b       	andi	r24, 0xBF	; 191
 138:	88 62       	ori	r24, 0x28	; 40
 13a:	dd cf       	rjmp	.-70     	; 0xf6 <main+0x58>

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
