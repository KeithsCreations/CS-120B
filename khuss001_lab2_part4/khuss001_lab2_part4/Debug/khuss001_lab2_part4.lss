
khuss001_lab2_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000019a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000146  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001cc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000994  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000803  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002be  00000000  00000000  000013cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001690  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ed  00000000  00000000  000016d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000225  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	02 d0       	rcall	.+4      	; 0x9e <main>
  9a:	53 c0       	rjmp	.+166    	; 0x142 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  9e:	1a ba       	out	0x1a, r1	; 26
  a0:	8f ef       	ldi	r24, 0xFF	; 255
  a2:	8b bb       	out	0x1b, r24	; 27
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
  a4:	87 bb       	out	0x17, r24	; 23
  a6:	18 ba       	out	0x18, r1	; 24
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
  a8:	84 bb       	out	0x14, r24	; 20
  aa:	15 ba       	out	0x15, r1	; 21
	unsigned char tmpC = 0x00; //variable for PORTA
	unsigned char tmpB = 0x00;
  ac:	50 e0       	ldi	r21, 0x00	; 0
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
	unsigned char tmpC = 0x00; //variable for PORTA
  ae:	40 e0       	ldi	r20, 0x00	; 0
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	61 e0       	ldi	r22, 0x01	; 1
  b2:	70 e0       	ldi	r23, 0x00	; 0
int main(void)
{
	DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
	DDRB = 0xFF; PORTB = 0x00; // Configure port B's 8 pins as outputs
	DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
	unsigned char tmpC = 0x00; //variable for PORTA
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char tmpB = 0x00;
	unsigned int i = 0;
    while (1) 
    {
		for (i = 4; i < 8; i++){
			if (GetBit(PINA, i)){
  b8:	29 b3       	in	r18, 0x19	; 25
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	fc 01       	movw	r30, r24
  be:	34 96       	adiw	r30, 0x04	; 4
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <main+0x28>
  c2:	35 95       	asr	r19
  c4:	27 95       	ror	r18
  c6:	ea 95       	dec	r30
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <main+0x24>
  ca:	20 ff       	sbrs	r18, 0
  cc:	09 c0       	rjmp	.+18     	; 0xe0 <main+0x42>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  ce:	9b 01       	movw	r18, r22
  d0:	08 2e       	mov	r0, r24
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <main+0x3a>
  d4:	22 0f       	add	r18, r18
  d6:	33 1f       	adc	r19, r19
  d8:	0a 94       	dec	r0
  da:	e2 f7       	brpl	.-8      	; 0xd4 <main+0x36>
  dc:	52 2b       	or	r21, r18
  de:	09 c0       	rjmp	.+18     	; 0xf2 <main+0x54>
  e0:	9b 01       	movw	r18, r22
  e2:	08 2e       	mov	r0, r24
  e4:	02 c0       	rjmp	.+4      	; 0xea <main+0x4c>
  e6:	22 0f       	add	r18, r18
  e8:	33 1f       	adc	r19, r19
  ea:	0a 94       	dec	r0
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <main+0x48>
  ee:	20 95       	com	r18
  f0:	52 23       	and	r21, r18
  f2:	01 96       	adiw	r24, 0x01	; 1
	unsigned char tmpC = 0x00; //variable for PORTA
	unsigned char tmpB = 0x00;
	unsigned int i = 0;
    while (1) 
    {
		for (i = 4; i < 8; i++){
  f4:	84 30       	cpi	r24, 0x04	; 4
  f6:	91 05       	cpc	r25, r1
  f8:	f9 f6       	brne	.-66     	; 0xb8 <main+0x1a>
			else{
				tmpB = SetBit(tmpB, i-4, 0);
			}
		}
		for (i = 0; i < 4; i++){
			if (GetBit(PINA, i)){
  fa:	29 b3       	in	r18, 0x19	; 25
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	fc 01       	movw	r30, r24
 100:	34 97       	sbiw	r30, 0x04	; 4
 102:	02 c0       	rjmp	.+4      	; 0x108 <main+0x6a>
 104:	35 95       	asr	r19
 106:	27 95       	ror	r18
 108:	ea 95       	dec	r30
 10a:	e2 f7       	brpl	.-8      	; 0x104 <main+0x66>
 10c:	20 ff       	sbrs	r18, 0
 10e:	09 c0       	rjmp	.+18     	; 0x122 <main+0x84>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 110:	9b 01       	movw	r18, r22
 112:	08 2e       	mov	r0, r24
 114:	02 c0       	rjmp	.+4      	; 0x11a <main+0x7c>
 116:	22 0f       	add	r18, r18
 118:	33 1f       	adc	r19, r19
 11a:	0a 94       	dec	r0
 11c:	e2 f7       	brpl	.-8      	; 0x116 <main+0x78>
 11e:	42 2b       	or	r20, r18
 120:	09 c0       	rjmp	.+18     	; 0x134 <main+0x96>
 122:	9b 01       	movw	r18, r22
 124:	08 2e       	mov	r0, r24
 126:	02 c0       	rjmp	.+4      	; 0x12c <main+0x8e>
 128:	22 0f       	add	r18, r18
 12a:	33 1f       	adc	r19, r19
 12c:	0a 94       	dec	r0
 12e:	e2 f7       	brpl	.-8      	; 0x128 <main+0x8a>
 130:	20 95       	com	r18
 132:	42 23       	and	r20, r18
 134:	01 96       	adiw	r24, 0x01	; 1
			}
			else{
				tmpB = SetBit(tmpB, i-4, 0);
			}
		}
		for (i = 0; i < 4; i++){
 136:	88 30       	cpi	r24, 0x08	; 8
 138:	91 05       	cpc	r25, r1
 13a:	f9 f6       	brne	.-66     	; 0xfa <main+0x5c>
			}
			else{
				tmpC = SetBit(tmpC, i+4, 0);
			}
		}
		PORTB = tmpB;
 13c:	58 bb       	out	0x18, r21	; 24
		PORTC = tmpC;
 13e:	45 bb       	out	0x15, r20	; 21
    }
 140:	b9 cf       	rjmp	.-142    	; 0xb4 <main+0x16>

00000142 <_exit>:
 142:	f8 94       	cli

00000144 <__stop_program>:
 144:	ff cf       	rjmp	.-2      	; 0x144 <__stop_program>
