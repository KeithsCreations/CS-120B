
khuss001_lab4_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000020a  0000029e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008da  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007da  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000033f  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  0000172c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000045c  00000000  00000000  00001760  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ea e0       	ldi	r30, 0x0A	; 10
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 30       	cpi	r26, 0x02	; 2
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a2 e0       	ldi	r26, 0x02	; 2
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a8 30       	cpi	r26, 0x08	; 8
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	98 d0       	rcall	.+304    	; 0x1f4 <main>
  c4:	a0 c0       	rjmp	.+320    	; 0x206 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Tick>:
unsigned char button_1 = 0x00; //variable for PORTA
unsigned char button_2 = 0x00; //variable for PORTA
enum States { START, SM1_RESET, SM1_ON, SM1_DECREASE, SM1_INCREASE } state;

void Tick(){
				button_1 = ~PINC & 0x01;
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	91 e0       	ldi	r25, 0x01	; 1
  cc:	28 2f       	mov	r18, r24
  ce:	21 70       	andi	r18, 0x01	; 1
  d0:	80 fd       	sbrc	r24, 0
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <button_1>
				button_2 = ~PINC & 0x02;
  d8:	86 b1       	in	r24, 0x06	; 6
  da:	80 95       	com	r24
  dc:	82 70       	andi	r24, 0x02	; 2
  de:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
	switch(state){ // Transitions
  e2:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <state>
  e6:	92 30       	cpi	r25, 0x02	; 2
  e8:	c9 f0       	breq	.+50     	; 0x11c <Tick+0x54>
  ea:	28 f4       	brcc	.+10     	; 0xf6 <Tick+0x2e>
  ec:	99 23       	and	r25, r25
  ee:	49 f0       	breq	.+18     	; 0x102 <Tick+0x3a>
  f0:	91 30       	cpi	r25, 0x01	; 1
  f2:	59 f0       	breq	.+22     	; 0x10a <Tick+0x42>
  f4:	5a c0       	rjmp	.+180    	; 0x1aa <Tick+0xe2>
  f6:	93 30       	cpi	r25, 0x03	; 3
  f8:	81 f1       	breq	.+96     	; 0x15a <Tick+0x92>
  fa:	94 30       	cpi	r25, 0x04	; 4
  fc:	09 f4       	brne	.+2      	; 0x100 <Tick+0x38>
  fe:	40 c0       	rjmp	.+128    	; 0x180 <Tick+0xb8>
 100:	54 c0       	rjmp	.+168    	; 0x1aa <Tick+0xe2>
		case START:
		state = SM1_RESET;
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
		break;
 108:	59 c0       	rjmp	.+178    	; 0x1bc <Tick+0xf4>
		case SM1_RESET:
		if (!button_1 && !button_2) {
 10a:	22 23       	and	r18, r18
 10c:	09 f4       	brne	.+2      	; 0x110 <Tick+0x48>
 10e:	56 c0       	rjmp	.+172    	; 0x1bc <Tick+0xf4>
 110:	81 11       	cpse	r24, r1
 112:	54 c0       	rjmp	.+168    	; 0x1bc <Tick+0xf4>
			state = SM1_ON;
 114:	82 e0       	ldi	r24, 0x02	; 2
 116:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 11a:	54 c0       	rjmp	.+168    	; 0x1c4 <Tick+0xfc>
		else if (button_1 && button_2) {
			state = SM1_RESET;
		}
		break;
		case SM1_ON:
		if (!button_1 && !button_2) {
 11c:	22 23       	and	r18, r18
 11e:	21 f0       	breq	.+8      	; 0x128 <Tick+0x60>
 120:	88 23       	and	r24, r24
 122:	09 f4       	brne	.+2      	; 0x126 <Tick+0x5e>
 124:	4f c0       	rjmp	.+158    	; 0x1c4 <Tick+0xfc>
 126:	52 c0       	rjmp	.+164    	; 0x1cc <Tick+0x104>
			state = SM1_ON;
		}
		else if (button_1 && button_2) {
 128:	88 23       	and	r24, r24
 12a:	09 f4       	brne	.+2      	; 0x12e <Tick+0x66>
 12c:	53 c0       	rjmp	.+166    	; 0x1d4 <Tick+0x10c>
			state = SM1_RESET;
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 134:	43 c0       	rjmp	.+134    	; 0x1bc <Tick+0xf4>
	}
	else if (((button_1 && !button_2) && count < max)) {
			state = SM1_INCREASE;
 136:	84 e0       	ldi	r24, 0x04	; 4
 138:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 13c:	08 95       	ret
		}
		else if (((!button_1 && button_2) && count > min)) {
 13e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <min>
 148:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <min+0x1>
 14c:	28 17       	cp	r18, r24
 14e:	39 07       	cpc	r19, r25
 150:	c8 f5       	brcc	.+114    	; 0x1c4 <Tick+0xfc>
			state = SM1_DECREASE;
 152:	83 e0       	ldi	r24, 0x03	; 3
 154:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 158:	08 95       	ret
		}
		break;
		case SM1_DECREASE:
		if (!button_1 && !button_2) {
 15a:	22 23       	and	r18, r18
 15c:	59 f0       	breq	.+22     	; 0x174 <Tick+0xac>
 15e:	81 11       	cpse	r24, r1
 160:	48 c0       	rjmp	.+144    	; 0x1f2 <Tick+0x12a>
			state = SM1_ON;
 162:	82 e0       	ldi	r24, 0x02	; 2
 164:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			count--;
 168:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 16c:	81 50       	subi	r24, 0x01	; 1
 16e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
 172:	28 c0       	rjmp	.+80     	; 0x1c4 <Tick+0xfc>
		}
		else if ((!button_1 && button_2)) {
			state = SM1_DECREASE;
		}
		else if (button_1 && button_2) {
 174:	88 23       	and	r24, r24
 176:	e9 f1       	breq	.+122    	; 0x1f2 <Tick+0x12a>
			state = SM1_RESET;
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 17e:	1e c0       	rjmp	.+60     	; 0x1bc <Tick+0xf4>
		}
		break;
		case SM1_INCREASE:
		if (!button_1 && !button_2) {
 180:	22 23       	and	r18, r18
 182:	59 f0       	breq	.+22     	; 0x19a <Tick+0xd2>
 184:	81 11       	cpse	r24, r1
 186:	32 c0       	rjmp	.+100    	; 0x1ec <Tick+0x124>
			state = SM1_ON;
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
			count++;
 18e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 192:	8f 5f       	subi	r24, 0xFF	; 255
 194:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <count>
 198:	15 c0       	rjmp	.+42     	; 0x1c4 <Tick+0xfc>
		}
		else if (button_1 && !button_2) {
 19a:	21 11       	cpse	r18, r1
 19c:	2a c0       	rjmp	.+84     	; 0x1f2 <Tick+0x12a>
 19e:	88 23       	and	r24, r24
 1a0:	41 f1       	breq	.+80     	; 0x1f2 <Tick+0x12a>
			state = SM1_INCREASE;
		}
		else if (button_1 && button_2) {
			state = SM1_RESET;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1a8:	09 c0       	rjmp	.+18     	; 0x1bc <Tick+0xf4>
		}
		break;
		default:
		state = SM1_RESET;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <state>
 1b0:	05 c0       	rjmp	.+10     	; 0x1bc <Tick+0xf4>
	}//Transitions

	switch(state){ // state actions
 1b2:	91 30       	cpi	r25, 0x01	; 1
 1b4:	19 f0       	breq	.+6      	; 0x1bc <Tick+0xf4>
 1b6:	92 30       	cpi	r25, 0x02	; 2
 1b8:	29 f0       	breq	.+10     	; 0x1c4 <Tick+0xfc>
 1ba:	08 95       	ret
		case SM1_RESET:
		count = 0;
 1bc:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <count>
		PORTD = count;
 1c0:	1b b8       	out	0x0b, r1	; 11
		break;
 1c2:	08 95       	ret
		case SM1_ON:
		PORTD = count;
 1c4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 1c8:	8b b9       	out	0x0b, r24	; 11
		case SM1_INCREASE:
		break;
		default: // ADD default behaviour below
		break;
	}// State actions
}
 1ca:	08 95       	ret
		break;
		case SM1_ON:
		if (!button_1 && !button_2) {
			state = SM1_ON;
		}
		else if (button_1 && button_2) {
 1cc:	22 23       	and	r18, r18
 1ce:	09 f4       	brne	.+2      	; 0x1d2 <Tick+0x10a>
 1d0:	ae cf       	rjmp	.-164    	; 0x12e <Tick+0x66>
 1d2:	b5 cf       	rjmp	.-150    	; 0x13e <Tick+0x76>
			state = SM1_RESET;
	}
	else if (((button_1 && !button_2) && count < max)) {
 1d4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <count>
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
 1de:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
 1e2:	82 17       	cp	r24, r18
 1e4:	93 07       	cpc	r25, r19
 1e6:	08 f4       	brcc	.+2      	; 0x1ea <Tick+0x122>
 1e8:	a6 cf       	rjmp	.-180    	; 0x136 <Tick+0x6e>
 1ea:	ec cf       	rjmp	.-40     	; 0x1c4 <Tick+0xfc>
		case SM1_INCREASE:
		if (!button_1 && !button_2) {
			state = SM1_ON;
			count++;
		}
		else if (button_1 && !button_2) {
 1ec:	22 23       	and	r18, r18
 1ee:	c9 f2       	breq	.-78     	; 0x1a2 <Tick+0xda>
 1f0:	e0 cf       	rjmp	.-64     	; 0x1b2 <Tick+0xea>
 1f2:	08 95       	ret

000001f4 <main>:
		break;
	}// State actions
}

void main(){
	DDRD = 0xFF; PORTD = 0x00; // Initialize outputs
 1f4:	8f ef       	ldi	r24, 0xFF	; 255
 1f6:	8a b9       	out	0x0a, r24	; 10
 1f8:	1b b8       	out	0x0b, r1	; 11
	DDRC = 0x00; PORTC = 0xFF;
 1fa:	17 b8       	out	0x07, r1	; 7
 1fc:	88 b9       	out	0x08, r24	; 8
	state = START; // Indicates initial call
 1fe:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <state>
	while(1) {
				Tick();
 202:	62 df       	rcall	.-316    	; 0xc8 <Tick>
 204:	fe cf       	rjmp	.-4      	; 0x202 <main+0xe>

00000206 <_exit>:
 206:	f8 94       	cli

00000208 <__stop_program>:
 208:	ff cf       	rjmp	.-2      	; 0x208 <__stop_program>
