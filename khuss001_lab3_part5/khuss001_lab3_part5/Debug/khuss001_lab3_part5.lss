
khuss001_lab3_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000002ba  0000034e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800064  00800064  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000063d  00000000  00000000  000003e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000056a  00000000  00000000  00000a25  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003c7  00000000  00000000  00000f8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000039f  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000172b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
   c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
  54:	67 00       	.word	0x0067	; ????
  56:	6b 00       	.word	0x006b	; ????
  58:	7a 00       	.word	0x007a	; ????
  5a:	bd 00       	.word	0x00bd	; ????
  5c:	d7 00       	.word	0x00d7	; ????
  5e:	e6 00       	.word	0x00e6	; ????
  60:	f1 00       	.word	0x00f1	; ????
  62:	ff 00       	.word	0x00ff	; ????
  64:	0d 01       	movw	r0, r26
  66:	35 01       	movw	r6, r10
  68:	38 01       	movw	r6, r16
  6a:	3b 01       	movw	r6, r22
  6c:	3e 01       	movw	r6, r28
  6e:	41 01       	movw	r8, r2
  70:	44 01       	movw	r8, r8
  72:	49 01       	movw	r8, r18
  74:	4c 01       	movw	r8, r24

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
  82:	10 e0       	ldi	r17, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	ea eb       	ldi	r30, 0xBA	; 186
  8a:	f2 e0       	ldi	r31, 0x02	; 2
  8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
  8e:	05 90       	lpm	r0, Z+
  90:	0d 92       	st	X+, r0
  92:	a4 36       	cpi	r26, 0x64	; 100
  94:	b1 07       	cpc	r27, r17
  96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
  98:	20 e0       	ldi	r18, 0x00	; 0
  9a:	a4 e6       	ldi	r26, 0x64	; 100
  9c:	b0 e0       	ldi	r27, 0x00	; 0
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a9 36       	cpi	r26, 0x69	; 105
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	0e 94 4f 01 	call	0x29e	; 0x29e <main>
  ac:	0c 94 5b 01 	jmp	0x2b6	; 0x2b6 <_exit>

000000b0 <__bad_interrupt>:
  b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <TickFct_State_machine_1>:

unsigned char code[4] = {0x04, 0x01, 0x02, 0x01};
	unsigned short i = 0;
	unsigned short j = 0;
TickFct_State_machine_1() {
	switch(SM1_State) { // Transitions
  b4:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <SM1_State>
  b8:	8e 2f       	mov	r24, r30
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	89 30       	cpi	r24, 0x09	; 9
  be:	91 05       	cpc	r25, r1
  c0:	08 f0       	brcs	.+2      	; 0xc4 <TickFct_State_machine_1+0x10>
  c2:	d0 c0       	rjmp	.+416    	; 0x264 <TickFct_State_machine_1+0x1b0>
  c4:	fc 01       	movw	r30, r24
  c6:	e6 5d       	subi	r30, 0xD6	; 214
  c8:	ff 4f       	sbci	r31, 0xFF	; 255
  ca:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__tablejump2__>
		case START:
		SM1_State = SM1_LOCKED;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
		break;
  d4:	ca c0       	rjmp	.+404    	; 0x26a <TickFct_State_machine_1+0x1b6>
		case SM1_LOCKED:
		if ((PINA == 0x00)
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	81 11       	cpse	r24, r1
  da:	c7 c0       	rjmp	.+398    	; 0x26a <TickFct_State_machine_1+0x1b6>
		) {
			SM1_State = SM1_PERHAPS_1;
  dc:	82 e0       	ldi	r24, 0x02	; 2
  de:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
			i = 0;
  e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i+0x1>
  e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
			j = 0;
  ea:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
  ee:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
  f2:	be c0       	rjmp	.+380    	; 0x270 <TickFct_State_machine_1+0x1bc>
		}
		break;
		case SM1_PERHAPS_1: //MAIN LOOP
		if (PINA == code[i] && ((PINA & 0x80) == 0x00) && i < 4)
  f4:	39 b3       	in	r19, 0x19	; 25
  f6:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
  fa:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <i+0x1>
  fe:	fc 01       	movw	r30, r24
 100:	e0 5a       	subi	r30, 0xA0	; 160
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	20 81       	ld	r18, Z
 106:	32 13       	cpse	r19, r18
 108:	09 c0       	rjmp	.+18     	; 0x11c <TickFct_State_machine_1+0x68>
 10a:	cf 99       	sbic	0x19, 7	; 25
 10c:	07 c0       	rjmp	.+14     	; 0x11c <TickFct_State_machine_1+0x68>
 10e:	84 30       	cpi	r24, 0x04	; 4
 110:	91 05       	cpc	r25, r1
 112:	20 f4       	brcc	.+8      	; 0x11c <TickFct_State_machine_1+0x68>
		 {
			SM1_State = SM1_PERHAPS_2;
 114:	83 e0       	ldi	r24, 0x03	; 3
 116:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 11a:	ad c0       	rjmp	.+346    	; 0x276 <TickFct_State_machine_1+0x1c2>
		}
		else if (i == 4)
 11c:	84 30       	cpi	r24, 0x04	; 4
 11e:	91 05       	cpc	r25, r1
 120:	79 f4       	brne	.+30     	; 0x140 <TickFct_State_machine_1+0x8c>
		 {
			 if (j == 1){
 122:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 126:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 12a:	81 30       	cpi	r24, 0x01	; 1
 12c:	91 05       	cpc	r25, r1
 12e:	21 f4       	brne	.+8      	; 0x138 <TickFct_State_machine_1+0x84>
				 SM1_State = SM1_LOCKED;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 136:	99 c0       	rjmp	.+306    	; 0x26a <TickFct_State_machine_1+0x1b6>
			 }
			 else{
			SM1_State = SM1_UNLOCKED;}
 138:	86 e0       	ldi	r24, 0x06	; 6
 13a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 13e:	a4 c0       	rjmp	.+328    	; 0x288 <TickFct_State_machine_1+0x1d4>
		}
		else if (PINA & 0x80) {
 140:	cf 9b       	sbis	0x19, 7	; 25
 142:	04 c0       	rjmp	.+8      	; 0x14c <TickFct_State_machine_1+0x98>
			SM1_State = SM1_LOCKED;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 14a:	8f c0       	rjmp	.+286    	; 0x26a <TickFct_State_machine_1+0x1b6>
		}
		else if ((PINA != code[i] && PINA != 0x00))
 14c:	89 b3       	in	r24, 0x19	; 25
 14e:	28 17       	cp	r18, r24
 150:	09 f4       	brne	.+2      	; 0x154 <TickFct_State_machine_1+0xa0>
 152:	8e c0       	rjmp	.+284    	; 0x270 <TickFct_State_machine_1+0x1bc>
 154:	89 b3       	in	r24, 0x19	; 25
 156:	88 23       	and	r24, r24
 158:	09 f4       	brne	.+2      	; 0x15c <TickFct_State_machine_1+0xa8>
 15a:	8a c0       	rjmp	.+276    	; 0x270 <TickFct_State_machine_1+0x1bc>
		{
			if (j == 1){
 15c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 160:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 164:	81 30       	cpi	r24, 0x01	; 1
 166:	91 05       	cpc	r25, r1
 168:	21 f4       	brne	.+8      	; 0x172 <TickFct_State_machine_1+0xbe>
				SM1_State = SM1_UNLOCKED;
 16a:	86 e0       	ldi	r24, 0x06	; 6
 16c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 170:	8b c0       	rjmp	.+278    	; 0x288 <TickFct_State_machine_1+0x1d4>
			}
			else{
			SM1_State = SM1_LOCKED;}
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 178:	78 c0       	rjmp	.+240    	; 0x26a <TickFct_State_machine_1+0x1b6>
		}
		break;
		case SM1_PERHAPS_2: 
		if (PINA == 0x00)
 17a:	89 b3       	in	r24, 0x19	; 25
 17c:	81 11       	cpse	r24, r1
 17e:	0d c0       	rjmp	.+26     	; 0x19a <TickFct_State_machine_1+0xe6>
		 {
			SM1_State = SM1_PERHAPS_1;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
			i++;
 186:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <i>
 18a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <i+0x1>
 18e:	01 96       	adiw	r24, 0x01	; 1
 190:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <i+0x1>
 194:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <i>
 198:	6b c0       	rjmp	.+214    	; 0x270 <TickFct_State_machine_1+0x1bc>
		}
		else if (PINA < 5) {
 19a:	89 b3       	in	r24, 0x19	; 25
 19c:	85 30       	cpi	r24, 0x05	; 5
 19e:	08 f4       	brcc	.+2      	; 0x1a2 <TickFct_State_machine_1+0xee>
 1a0:	6a c0       	rjmp	.+212    	; 0x276 <TickFct_State_machine_1+0x1c2>
			break;
		}
		else if (PINA & 0x80 == 0x80) {
 1a2:	c8 9b       	sbis	0x19, 0	; 25
 1a4:	68 c0       	rjmp	.+208    	; 0x276 <TickFct_State_machine_1+0x1c2>
			SM1_State = SM1_LOCKED;		
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 1ac:	5e c0       	rjmp	.+188    	; 0x26a <TickFct_State_machine_1+0x1b6>
			}
		break;
		case SM1_PERHAPS_3:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 1ae:	89 b3       	in	r24, 0x19	; 25
 1b0:	81 11       	cpse	r24, r1
 1b2:	06 c0       	rjmp	.+12     	; 0x1c0 <TickFct_State_machine_1+0x10c>
 1b4:	cf 99       	sbic	0x19, 7	; 25
 1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <TickFct_State_machine_1+0x10c>
		) {
			SM1_State = SM1_UNLOCKED;
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 1be:	64 c0       	rjmp	.+200    	; 0x288 <TickFct_State_machine_1+0x1d4>
						
		}
		else if (PINA == 0x02 && ((PINA & 0x80) == 0x00)
 1c0:	89 b3       	in	r24, 0x19	; 25
 1c2:	82 30       	cpi	r24, 0x02	; 2
 1c4:	09 f0       	breq	.+2      	; 0x1c8 <TickFct_State_machine_1+0x114>
 1c6:	5a c0       	rjmp	.+180    	; 0x27c <TickFct_State_machine_1+0x1c8>
 1c8:	89 b3       	in	r24, 0x19	; 25
 1ca:	58 c0       	rjmp	.+176    	; 0x27c <TickFct_State_machine_1+0x1c8>
		) {
			SM1_State = SM1_PERHAPS_3;
		}
		break;
		case SM1_PERHAPS_4:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 1cc:	89 b3       	in	r24, 0x19	; 25
 1ce:	81 11       	cpse	r24, r1
 1d0:	06 c0       	rjmp	.+12     	; 0x1de <TickFct_State_machine_1+0x12a>
 1d2:	cf 99       	sbic	0x19, 7	; 25
 1d4:	04 c0       	rjmp	.+8      	; 0x1de <TickFct_State_machine_1+0x12a>
		) {
			SM1_State = SM1_UNLOCKED;			
 1d6:	86 e0       	ldi	r24, 0x06	; 6
 1d8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 1dc:	55 c0       	rjmp	.+170    	; 0x288 <TickFct_State_machine_1+0x1d4>
		}
		else if (PINA == 0x04
 1de:	89 b3       	in	r24, 0x19	; 25
 1e0:	50 c0       	rjmp	.+160    	; 0x282 <TickFct_State_machine_1+0x1ce>
		) {
			SM1_State = SM1_PERHAPS_4;
		}
		break;
		case SM1_UNLOCKED:
		i = 0;
 1e2:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <i+0x1>
 1e6:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <i>
		j = 1;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 1f2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
		SM1_State = SM1_PERHAPS_1;
 1f6:	82 e0       	ldi	r24, 0x02	; 2
 1f8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
		break;
 1fc:	39 c0       	rjmp	.+114    	; 0x270 <TickFct_State_machine_1+0x1bc>
		case UNPERHAPS: //ignore
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 1fe:	89 b3       	in	r24, 0x19	; 25
 200:	81 11       	cpse	r24, r1
 202:	06 c0       	rjmp	.+12     	; 0x210 <TickFct_State_machine_1+0x15c>
 204:	cf 99       	sbic	0x19, 7	; 25
 206:	04 c0       	rjmp	.+8      	; 0x210 <TickFct_State_machine_1+0x15c>
		) {
			SM1_State = UNPERHAPS_2;
 208:	88 e0       	ldi	r24, 0x08	; 8
 20a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 20e:	44 c0       	rjmp	.+136    	; 0x298 <TickFct_State_machine_1+0x1e4>
			
		}
		else if (PINA == 0x04 && ((PINA & 0x80) == 0x00)
 210:	89 b3       	in	r24, 0x19	; 25
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	f1 f5       	brne	.+124    	; 0x292 <TickFct_State_machine_1+0x1de>
 216:	89 b3       	in	r24, 0x19	; 25
 218:	3c c0       	rjmp	.+120    	; 0x292 <TickFct_State_machine_1+0x1de>
		) {
			SM1_State = UNPERHAPS; 
		}
		break;
		case UNPERHAPS_2: //            ignore
		if ((PINA == 0x01 || PINA == 0x80)
 21a:	89 b3       	in	r24, 0x19	; 25
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	19 f0       	breq	.+6      	; 0x226 <TickFct_State_machine_1+0x172>
 220:	89 b3       	in	r24, 0x19	; 25
 222:	80 38       	cpi	r24, 0x80	; 128
 224:	21 f4       	brne	.+8      	; 0x22e <TickFct_State_machine_1+0x17a>
		) {
			SM1_State = SM1_UNLOCKED;
 226:	86 e0       	ldi	r24, 0x06	; 6
 228:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 22c:	2d c0       	rjmp	.+90     	; 0x288 <TickFct_State_machine_1+0x1d4>
		}
		else if (PINA == 0x02
 22e:	89 b3       	in	r24, 0x19	; 25
 230:	82 30       	cpi	r24, 0x02	; 2
 232:	89 f4       	brne	.+34     	; 0x256 <TickFct_State_machine_1+0x1a2>
		) {
			SM1_State = SM1_LOCKED;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
			PORTB = 0x00;
 23a:	18 ba       	out	0x18, r1	; 24
		break;
		default:
		SM1_State = SM1_LOCKED;
	} // Transitions

	switch(SM1_State) { // State actions
 23c:	e0 91 68 00 	lds	r30, 0x0068	; 0x800068 <SM1_State>
 240:	8e 2f       	mov	r24, r30
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	fc 01       	movw	r30, r24
 246:	31 97       	sbiw	r30, 0x01	; 1
 248:	e8 30       	cpi	r30, 0x08	; 8
 24a:	f1 05       	cpc	r31, r1
 24c:	38 f5       	brcc	.+78     	; 0x29c <TickFct_State_machine_1+0x1e8>
 24e:	ed 5c       	subi	r30, 0xCD	; 205
 250:	ff 4f       	sbci	r31, 0xFF	; 255
 252:	0c 94 55 01 	jmp	0x2aa	; 0x2aa <__tablejump2__>
		else if (PINA == 0x02
		) {
			SM1_State = SM1_LOCKED;
			PORTB = 0x00;
		}
		else if (PINA == 0x04){
 256:	89 b3       	in	r24, 0x19	; 25
 258:	84 30       	cpi	r24, 0x04	; 4
 25a:	f1 f4       	brne	.+60     	; 0x298 <TickFct_State_machine_1+0x1e4>
			SM1_State = SM1_PERHAPS_4;
 25c:	85 e0       	ldi	r24, 0x05	; 5
 25e:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
 262:	0f c0       	rjmp	.+30     	; 0x282 <TickFct_State_machine_1+0x1ce>
		}
		break;
		default:
		SM1_State = SM1_LOCKED;
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <SM1_State>
	} // Transitions

	switch(SM1_State) { // State actions
		case SM1_LOCKED:
		PORTB = 0x00;
 26a:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 26c:	15 ba       	out	0x15, r1	; 21
		break;
 26e:	08 95       	ret
		case SM1_PERHAPS_1:
					PORTC = 0x01;
 270:	81 e0       	ldi	r24, 0x01	; 1
 272:	85 bb       	out	0x15, r24	; 21
		break;
 274:	08 95       	ret
		case SM1_PERHAPS_2:
					PORTC = 0x02;
 276:	82 e0       	ldi	r24, 0x02	; 2
 278:	85 bb       	out	0x15, r24	; 21
		break;
 27a:	08 95       	ret
		case SM1_PERHAPS_3:
					PORTC = 0x03;
 27c:	83 e0       	ldi	r24, 0x03	; 3
 27e:	85 bb       	out	0x15, r24	; 21
		break;
 280:	08 95       	ret
		case SM1_PERHAPS_4:
					PORTC = 0x07;
 282:	87 e0       	ldi	r24, 0x07	; 7
 284:	85 bb       	out	0x15, r24	; 21
		break;
 286:	08 95       	ret
		case SM1_UNLOCKED:
					PORTC = 0x04;
 288:	84 e0       	ldi	r24, 0x04	; 4
 28a:	85 bb       	out	0x15, r24	; 21
					PORTB = 0x01;
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	88 bb       	out	0x18, r24	; 24
		break;
 290:	08 95       	ret
		case UNPERHAPS:
					PORTC = 0x05;
 292:	85 e0       	ldi	r24, 0x05	; 5
 294:	85 bb       	out	0x15, r24	; 21
		break;
 296:	08 95       	ret
		case UNPERHAPS_2:
					PORTC = 0x06;
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	85 bb       	out	0x15, r24	; 21
		default: // ADD default behaviour below
		break;
	} // State actions

}
 29c:	08 95       	ret

0000029e <main>:

	//const unsigned int periodState_machine_1 = 1000; // 1000 ms default
	//TimerSet(periodState_machine_1);
	// TimerOn();
	
	SM1_State = START; // Initial state
 29e:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <SM1_State>
	PORTB = 0; // Init outputs
 2a2:	18 ba       	out	0x18, r1	; 24

	while(1) {
		TickFct_State_machine_1();
 2a4:	0e 94 5a 00 	call	0xb4	; 0xb4 <TickFct_State_machine_1>
 2a8:	fd cf       	rjmp	.-6      	; 0x2a4 <main+0x6>

000002aa <__tablejump2__>:
 2aa:	ee 0f       	add	r30, r30
 2ac:	ff 1f       	adc	r31, r31
 2ae:	05 90       	lpm	r0, Z+
 2b0:	f4 91       	lpm	r31, Z
 2b2:	e0 2d       	mov	r30, r0
 2b4:	09 94       	ijmp

000002b6 <_exit>:
 2b6:	f8 94       	cli

000002b8 <__stop_program>:
 2b8:	ff cf       	rjmp	.-2      	; 0x2b8 <__stop_program>
