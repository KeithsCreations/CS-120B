
khuss001_lab2_part5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000b2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000106  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000138  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000620  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000254  00000000  00000000  00000d4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000fa0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00000fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000012e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000013b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 57 00 	jmp	0xae	; 0xae <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
	DDRD = 0x00; PORTD = 0xFF; // Configure port A's 8 pins as inputs
  6c:	11 ba       	out	0x11, r1	; 17
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	82 bb       	out	0x12, r24	; 18
	DDRB = 0xFE; PORTB = 0x00; // Configure port B's 8 pins as outputs
  72:	8e ef       	ldi	r24, 0xFE	; 254
  74:	87 bb       	out	0x17, r24	; 23
  76:	18 ba       	out	0x18, r1	; 24
		tmpD = PIND;
		tmpD = ((tmpD << 1) + (PINB & 0x01));
		
		if (tmpD >= 0x46) {
			tmpB = SetBit(tmpB, 1, 1);
			tmpB = SetBit(tmpB, 2, 0);
  78:	52 e0       	ldi	r21, 0x02	; 2
		}
		else if (tmpD < 0x46 && tmpD > 0x05){
			tmpB = SetBit(tmpB, 1, 0);
			tmpB = SetBit(tmpB, 2, 1);
  7a:	74 e0       	ldi	r23, 0x04	; 4
		}
		else{
				tmpB = SetBit(tmpB, 1, 0);								
				tmpB = SetBit(tmpB, 2, 0);
  7c:	60 e0       	ldi	r22, 0x00	; 0
	DDRB = 0xFE; PORTB = 0x00; // Configure port B's 8 pins as outputs
	unsigned char tmpB = 0x00; //variable for PORTA
	unsigned int tmpD = 0x00;
	while (1)
	{
		tmpD = PIND;
  7e:	80 b3       	in	r24, 0x10	; 16
		tmpD = ((tmpD << 1) + (PINB & 0x01));
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	88 0f       	add	r24, r24
  84:	99 1f       	adc	r25, r25
  86:	46 b3       	in	r20, 0x16	; 22
  88:	24 2f       	mov	r18, r20
  8a:	21 70       	andi	r18, 0x01	; 1
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	82 0f       	add	r24, r18
  90:	93 1f       	adc	r25, r19
		
		if (tmpD >= 0x46) {
  92:	86 34       	cpi	r24, 0x46	; 70
  94:	91 05       	cpc	r25, r1
  96:	30 f4       	brcc	.+12     	; 0xa4 <main+0x38>
			tmpB = SetBit(tmpB, 1, 1);
			tmpB = SetBit(tmpB, 2, 0);
		}
		else if (tmpD < 0x46 && tmpD > 0x05){
  98:	06 97       	sbiw	r24, 0x06	; 6
  9a:	80 34       	cpi	r24, 0x40	; 64
  9c:	91 05       	cpc	r25, r1
  9e:	20 f0       	brcs	.+8      	; 0xa8 <main+0x3c>
			tmpB = SetBit(tmpB, 1, 0);
			tmpB = SetBit(tmpB, 2, 1);
		}
		else{
				tmpB = SetBit(tmpB, 1, 0);								
				tmpB = SetBit(tmpB, 2, 0);
  a0:	86 2f       	mov	r24, r22
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x3e>
		tmpD = PIND;
		tmpD = ((tmpD << 1) + (PINB & 0x01));
		
		if (tmpD >= 0x46) {
			tmpB = SetBit(tmpB, 1, 1);
			tmpB = SetBit(tmpB, 2, 0);
  a4:	85 2f       	mov	r24, r21
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x3e>
		}
		else if (tmpD < 0x46 && tmpD > 0x05){
			tmpB = SetBit(tmpB, 1, 0);
			tmpB = SetBit(tmpB, 2, 1);
  a8:	87 2f       	mov	r24, r23
		}
		else{
				tmpB = SetBit(tmpB, 1, 0);								
				tmpB = SetBit(tmpB, 2, 0);
		}
		PORTB = tmpB;
  aa:	88 bb       	out	0x18, r24	; 24
	}
  ac:	e8 cf       	rjmp	.-48     	; 0x7e <main+0x12>

000000ae <_exit>:
  ae:	f8 94       	cli

000000b0 <__stop_program>:
  b0:	ff cf       	rjmp	.-2      	; 0xb0 <__stop_program>
