
khuss001_lab8_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000026a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800100  00800100  0000026a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000029c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000040  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000964  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000856  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000036b  00000000  00000000  000014d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  000018a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000005b  00000000  00000000  00001cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000030  00000000  00000000  00001d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a5 30       	cpi	r26, 0x05	; 5
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	92 d0       	rcall	.+292    	; 0x1ce <main>
  aa:	a3 c0       	rjmp	.+326    	; 0x1f2 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <ADC_init>:
unsigned short my_short = 0x00;
unsigned char my_char;
unsigned char tmpB = 0x00;

void ADC_init() {
	ADCSRA |= (1 << ADEN) | (1 << ADSC) | (1 << ADATE);
  ae:	ea e7       	ldi	r30, 0x7A	; 122
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 6e       	ori	r24, 0xE0	; 224
  b6:	80 83       	st	Z, r24
  b8:	08 95       	ret

000000ba <Tick>:

enum States { START, ON } state;

void Tick(){

	switch(state){ // Transitions
  ba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <state>
  be:	88 23       	and	r24, r24
  c0:	19 f0       	breq	.+6      	; 0xc8 <Tick+0xe>
  c2:	81 30       	cpi	r24, 0x01	; 1
  c4:	29 f0       	breq	.+10     	; 0xd0 <Tick+0x16>
  c6:	08 95       	ret
		case START:
		state = ON;
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <state>
		break;
  ce:	08 95       	ret
		
		case ON:
		my_short = ADC;
  d0:	20 91 78 00 	lds	r18, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  d4:	30 91 79 00 	lds	r19, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
  d8:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <my_short+0x1>
  dc:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <my_short>
		my_char = (char)my_short;
  e0:	82 2f       	mov	r24, r18
  e2:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <my_char>
		if (my_short > 255){
  e6:	2f 3f       	cpi	r18, 0xFF	; 255
  e8:	31 05       	cpc	r19, r1
  ea:	29 f0       	breq	.+10     	; 0xf6 <Tick+0x3c>
  ec:	20 f0       	brcs	.+8      	; 0xf6 <Tick+0x3c>
			my_char = 255;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <my_char>
  f4:	02 c0       	rjmp	.+4      	; 0xfa <Tick+0x40>
		}
		if (my_char >= 227){
  f6:	23 3e       	cpi	r18, 0xE3	; 227
  f8:	d0 f1       	brcs	.+116    	; 0x16e <Tick+0xb4>
			tmpB = SetBit(tmpB, 0, 1);
  fa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  fe:	91 60       	ori	r25, 0x01	; 1
 100:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 227){
			tmpB = SetBit(tmpB, 0, 0);
		}
		if (my_char >= 200){
 104:	88 3c       	cpi	r24, 0xC8	; 200
 106:	c8 f1       	brcs	.+114    	; 0x17a <Tick+0xc0>
			tmpB = SetBit(tmpB, 1, 1);
 108:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 10c:	92 60       	ori	r25, 0x02	; 2
 10e:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 200){
			tmpB = SetBit(tmpB, 1, 0);
		}
		if (my_char >= 172){
 112:	8c 3a       	cpi	r24, 0xAC	; 172
 114:	c0 f1       	brcs	.+112    	; 0x186 <Tick+0xcc>
			tmpB = SetBit(tmpB, 2, 1);
 116:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 11a:	94 60       	ori	r25, 0x04	; 4
 11c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 172){
			tmpB = SetBit(tmpB, 2, 0);
		}
		if (my_char >= 145){
 120:	81 39       	cpi	r24, 0x91	; 145
 122:	b8 f1       	brcs	.+110    	; 0x192 <Tick+0xd8>
			tmpB = SetBit(tmpB, 3, 1);
 124:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 128:	98 60       	ori	r25, 0x08	; 8
 12a:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 145){
			tmpB = SetBit(tmpB, 3, 0);
		}
		if (my_char >= 117){
 12e:	85 37       	cpi	r24, 0x75	; 117
 130:	b0 f1       	brcs	.+108    	; 0x19e <Tick+0xe4>
			tmpB = SetBit(tmpB, 4, 1);
 132:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 136:	90 61       	ori	r25, 0x10	; 16
 138:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 117){
			tmpB = SetBit(tmpB, 4, 0);
		}
		if (my_char >= 90){
 13c:	8a 35       	cpi	r24, 0x5A	; 90
 13e:	a8 f1       	brcs	.+106    	; 0x1aa <Tick+0xf0>
			tmpB = SetBit(tmpB, 5, 1);
 140:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 144:	90 62       	ori	r25, 0x20	; 32
 146:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 90){
			tmpB = SetBit(tmpB, 5, 0);
		}
		if (my_char >= 62){
 14a:	8e 33       	cpi	r24, 0x3E	; 62
 14c:	a0 f1       	brcs	.+104    	; 0x1b6 <Tick+0xfc>
			tmpB = SetBit(tmpB, 6, 1);
 14e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 152:	90 64       	ori	r25, 0x40	; 64
 154:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
		}
		if (my_char < 62){
			tmpB = SetBit(tmpB, 6, 0);
		}
		if (my_char > 35){
 158:	84 32       	cpi	r24, 0x24	; 36
 15a:	98 f1       	brcs	.+102    	; 0x1c2 <Tick+0x108>
			tmpB = SetBit(tmpB, 7, 1);
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 160:	80 68       	ori	r24, 0x80	; 128
 162:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		}
		if (my_char <= 35){
			tmpB = SetBit(tmpB, 7, 0);
		}
		PORTB = tmpB;
 166:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 16a:	85 b9       	out	0x05, r24	; 5
		break;
		
	}//Transitions
}
 16c:	08 95       	ret
		}
		if (my_char >= 227){
			tmpB = SetBit(tmpB, 0, 1);
		}
		if (my_char < 227){
			tmpB = SetBit(tmpB, 0, 0);
 16e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 172:	9e 7f       	andi	r25, 0xFE	; 254
 174:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 178:	c5 cf       	rjmp	.-118    	; 0x104 <Tick+0x4a>
		}
		if (my_char >= 200){
			tmpB = SetBit(tmpB, 1, 1);
		}
		if (my_char < 200){
			tmpB = SetBit(tmpB, 1, 0);
 17a:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 17e:	9d 7f       	andi	r25, 0xFD	; 253
 180:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 184:	c6 cf       	rjmp	.-116    	; 0x112 <Tick+0x58>
		}
		if (my_char >= 172){
			tmpB = SetBit(tmpB, 2, 1);
		}
		if (my_char < 172){
			tmpB = SetBit(tmpB, 2, 0);
 186:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 18a:	9b 7f       	andi	r25, 0xFB	; 251
 18c:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 190:	c7 cf       	rjmp	.-114    	; 0x120 <Tick+0x66>
		}
		if (my_char >= 145){
			tmpB = SetBit(tmpB, 3, 1);
		}
		if (my_char < 145){
			tmpB = SetBit(tmpB, 3, 0);
 192:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 196:	97 7f       	andi	r25, 0xF7	; 247
 198:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 19c:	c8 cf       	rjmp	.-112    	; 0x12e <Tick+0x74>
		}
		if (my_char >= 117){
			tmpB = SetBit(tmpB, 4, 1);
		}
		if (my_char < 117){
			tmpB = SetBit(tmpB, 4, 0);
 19e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1a2:	9f 7e       	andi	r25, 0xEF	; 239
 1a4:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1a8:	c9 cf       	rjmp	.-110    	; 0x13c <Tick+0x82>
		}
		if (my_char >= 90){
			tmpB = SetBit(tmpB, 5, 1);
		}
		if (my_char < 90){
			tmpB = SetBit(tmpB, 5, 0);
 1aa:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1ae:	9f 7d       	andi	r25, 0xDF	; 223
 1b0:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1b4:	ca cf       	rjmp	.-108    	; 0x14a <Tick+0x90>
		}
		if (my_char >= 62){
			tmpB = SetBit(tmpB, 6, 1);
		}
		if (my_char < 62){
			tmpB = SetBit(tmpB, 6, 0);
 1b6:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
 1ba:	9f 7b       	andi	r25, 0xBF	; 191
 1bc:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <_edata>
 1c0:	cb cf       	rjmp	.-106    	; 0x158 <Tick+0x9e>
		}
		if (my_char > 35){
			tmpB = SetBit(tmpB, 7, 1);
		}
		if (my_char <= 35){
			tmpB = SetBit(tmpB, 7, 0);
 1c2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1c6:	8f 77       	andi	r24, 0x7F	; 127
 1c8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 1cc:	cc cf       	rjmp	.-104    	; 0x166 <Tick+0xac>

000001ce <main>:
}

int main(void)
{
	//DDRD = 0xFF; PORTD = 0x00;
	DDRB = 0xFF; PORTD = 0x00;
 1ce:	8f ef       	ldi	r24, 0xFF	; 255
 1d0:	84 b9       	out	0x04, r24	; 4
 1d2:	1b b8       	out	0x0b, r1	; 11
	DDRA = 0x00; PORTA = 0xFF;
 1d4:	11 b8       	out	0x01, r1	; 1
 1d6:	82 b9       	out	0x02, r24	; 2
	
	ADC_init();
 1d8:	6a df       	rcall	.-300    	; 0xae <ADC_init>
	
	my_short = ADC;
 1da:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 1de:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 1e2:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <my_short+0x1>
 1e6:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <my_short>
	
	state = START;
 1ea:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <state>
	
	/* Replace with your application code */
	while (1)
	{
		Tick();
 1ee:	65 df       	rcall	.-310    	; 0xba <Tick>
 1f0:	fe cf       	rjmp	.-4      	; 0x1ee <main+0x20>

000001f2 <_exit>:
 1f2:	f8 94       	cli

000001f4 <__stop_program>:
 1f4:	ff cf       	rjmp	.-2      	; 0x1f4 <__stop_program>
