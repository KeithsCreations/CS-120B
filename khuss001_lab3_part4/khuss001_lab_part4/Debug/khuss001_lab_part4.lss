
khuss001_lab_part4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ed  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000547  00000000  00000000  00000921  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000391  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000011fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
   4:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   8:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
   c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  10:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  14:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  18:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  1c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  20:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  24:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  28:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  2c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  30:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  34:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  38:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  3c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  40:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  44:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  48:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  4c:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  50:	0c 94 4d 00 	jmp	0x9a	; 0x9a <__bad_interrupt>
  54:	5c 00       	.word	0x005c	; ????
  56:	60 00       	.word	0x0060	; ????
  58:	6a 00       	.word	0x006a	; ????
  5a:	79 00       	.word	0x0079	; ????
  5c:	8e 00       	.word	0x008e	; ????
  5e:	9f 00       	.word	0x009f	; ????
  60:	aa 00       	.word	0x00aa	; ????
  62:	b8 00       	.word	0x00b8	; ????
  64:	c6 00       	.word	0x00c6	; ????
  66:	f0 00       	.word	0x00f0	; ????
  68:	f3 00       	.word	0x00f3	; ????
  6a:	f6 00       	.word	0x00f6	; ????
  6c:	f9 00       	.word	0x00f9	; ????
  6e:	fc 00       	.word	0x00fc	; ????
  70:	ff 00       	.word	0x00ff	; ????
  72:	02 01       	movw	r0, r4
  74:	05 01       	movw	r0, r10

00000076 <__ctors_end>:
  76:	11 24       	eor	r1, r1
  78:	1f be       	out	0x3f, r1	; 63
  7a:	cf e5       	ldi	r28, 0x5F	; 95
  7c:	d8 e0       	ldi	r29, 0x08	; 8
  7e:	de bf       	out	0x3e, r29	; 62
  80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_clear_bss>:
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	a0 e6       	ldi	r26, 0x60	; 96
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	01 c0       	rjmp	.+2      	; 0x8c <.do_clear_bss_start>

0000008a <.do_clear_bss_loop>:
  8a:	1d 92       	st	X+, r1

0000008c <.do_clear_bss_start>:
  8c:	a1 36       	cpi	r26, 0x61	; 97
  8e:	b2 07       	cpc	r27, r18
  90:	e1 f7       	brne	.-8      	; 0x8a <.do_clear_bss_loop>
  92:	0e 94 08 01 	call	0x210	; 0x210 <main>
  96:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

0000009a <__bad_interrupt>:
  9a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009e <TickFct_State_machine_1>:


enum SM1_States { START, SM1_LOCKED, SM1_PERHAPS_1, SM1_PERHAPS_2, SM1_PERHAPS_3, SM1_PERHAPS_4, SM1_UNLOCKED, UNPERHAPS, UNPERHAPS_2 } SM1_State;

TickFct_State_machine_1() {
	switch(SM1_State) { // Transitions
  9e:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
  a2:	8e 2f       	mov	r24, r30
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	89 30       	cpi	r24, 0x09	; 9
  a8:	91 05       	cpc	r25, r1
  aa:	08 f0       	brcs	.+2      	; 0xae <TickFct_State_machine_1+0x10>
  ac:	88 c0       	rjmp	.+272    	; 0x1be <TickFct_State_machine_1+0x120>
  ae:	fc 01       	movw	r30, r24
  b0:	e6 5d       	subi	r30, 0xD6	; 214
  b2:	ff 4f       	sbci	r31, 0xFF	; 255
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__tablejump2__>
		case START:
		SM1_State = SM1_LOCKED;
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		break;
  be:	90 c0       	rjmp	.+288    	; 0x1e0 <TickFct_State_machine_1+0x142>
		case SM1_LOCKED:
		if ((PINA == 0x04) && ((PINA & 0x80) == 0x00)
  c0:	89 b3       	in	r24, 0x19	; 25
  c2:	84 30       	cpi	r24, 0x04	; 4
  c4:	09 f0       	breq	.+2      	; 0xc8 <TickFct_State_machine_1+0x2a>
  c6:	8c c0       	rjmp	.+280    	; 0x1e0 <TickFct_State_machine_1+0x142>
  c8:	cf 99       	sbic	0x19, 7	; 25
  ca:	8a c0       	rjmp	.+276    	; 0x1e0 <TickFct_State_machine_1+0x142>
		) {
			SM1_State = SM1_PERHAPS_1;
  cc:	82 e0       	ldi	r24, 0x02	; 2
  ce:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  d2:	89 c0       	rjmp	.+274    	; 0x1e6 <TickFct_State_machine_1+0x148>
		}
		break;
		case SM1_PERHAPS_1:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
  d4:	89 b3       	in	r24, 0x19	; 25
  d6:	81 11       	cpse	r24, r1
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <TickFct_State_machine_1+0x48>
  da:	cf 99       	sbic	0x19, 7	; 25
  dc:	04 c0       	rjmp	.+8      	; 0xe6 <TickFct_State_machine_1+0x48>
		) {
			SM1_State = SM1_PERHAPS_2;
  de:	83 e0       	ldi	r24, 0x03	; 3
  e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  e4:	83 c0       	rjmp	.+262    	; 0x1ec <TickFct_State_machine_1+0x14e>
			
		}
		else if (PINA == 0x04 && ((PINA & 0x80) == 0x00)
  e6:	89 b3       	in	r24, 0x19	; 25
  e8:	84 30       	cpi	r24, 0x04	; 4
  ea:	09 f0       	breq	.+2      	; 0xee <TickFct_State_machine_1+0x50>
  ec:	7c c0       	rjmp	.+248    	; 0x1e6 <TickFct_State_machine_1+0x148>
  ee:	89 b3       	in	r24, 0x19	; 25
  f0:	7a c0       	rjmp	.+244    	; 0x1e6 <TickFct_State_machine_1+0x148>
		) {
			SM1_State = SM1_PERHAPS_1;
		}
		break;
		case SM1_PERHAPS_2:
		if ((PINA == 0x01 || PINA == 0x80 || PINA == 0x04 )
  f2:	89 b3       	in	r24, 0x19	; 25
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	31 f0       	breq	.+12     	; 0x104 <TickFct_State_machine_1+0x66>
  f8:	89 b3       	in	r24, 0x19	; 25
  fa:	80 38       	cpi	r24, 0x80	; 128
  fc:	19 f0       	breq	.+6      	; 0x104 <TickFct_State_machine_1+0x66>
  fe:	89 b3       	in	r24, 0x19	; 25
 100:	84 30       	cpi	r24, 0x04	; 4
 102:	21 f4       	brne	.+8      	; 0x10c <TickFct_State_machine_1+0x6e>
		) {
			SM1_State = SM1_LOCKED;
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 10a:	6a c0       	rjmp	.+212    	; 0x1e0 <TickFct_State_machine_1+0x142>
		}
		else if (PINA == 0x02
 10c:	89 b3       	in	r24, 0x19	; 25
 10e:	82 30       	cpi	r24, 0x02	; 2
 110:	09 f0       	breq	.+2      	; 0x114 <TickFct_State_machine_1+0x76>
 112:	6c c0       	rjmp	.+216    	; 0x1ec <TickFct_State_machine_1+0x14e>

		) {
			SM1_State = SM1_PERHAPS_3;		}
 114:	84 e0       	ldi	r24, 0x04	; 4
 116:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 11a:	6b c0       	rjmp	.+214    	; 0x1f2 <TickFct_State_machine_1+0x154>
		break;
		case SM1_PERHAPS_3:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 11c:	89 b3       	in	r24, 0x19	; 25
 11e:	81 11       	cpse	r24, r1
 120:	08 c0       	rjmp	.+16     	; 0x132 <TickFct_State_machine_1+0x94>
 122:	cf 99       	sbic	0x19, 7	; 25
 124:	06 c0       	rjmp	.+12     	; 0x132 <TickFct_State_machine_1+0x94>
		) {
			SM1_State = SM1_UNLOCKED;
 126:	86 e0       	ldi	r24, 0x06	; 6
 128:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			PORTB = 0x01;			
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	88 bb       	out	0x18, r24	; 24
 130:	4a c0       	rjmp	.+148    	; 0x1c6 <TickFct_State_machine_1+0x128>
		}
		else if (PINA == 0x02 && ((PINA & 0x80) == 0x00)
 132:	89 b3       	in	r24, 0x19	; 25
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	09 f0       	breq	.+2      	; 0x13a <TickFct_State_machine_1+0x9c>
 138:	5c c0       	rjmp	.+184    	; 0x1f2 <TickFct_State_machine_1+0x154>
 13a:	89 b3       	in	r24, 0x19	; 25
 13c:	5a c0       	rjmp	.+180    	; 0x1f2 <TickFct_State_machine_1+0x154>
		) {
			SM1_State = SM1_PERHAPS_3;
		}
		break;
		case SM1_PERHAPS_4:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 13e:	89 b3       	in	r24, 0x19	; 25
 140:	81 11       	cpse	r24, r1
 142:	06 c0       	rjmp	.+12     	; 0x150 <TickFct_State_machine_1+0xb2>
 144:	cf 99       	sbic	0x19, 7	; 25
 146:	04 c0       	rjmp	.+8      	; 0x150 <TickFct_State_machine_1+0xb2>
		) {
			SM1_State = SM1_UNLOCKED;			
 148:	86 e0       	ldi	r24, 0x06	; 6
 14a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 14e:	57 c0       	rjmp	.+174    	; 0x1fe <TickFct_State_machine_1+0x160>
		}
		else if (PINA == 0x04
 150:	89 b3       	in	r24, 0x19	; 25
 152:	52 c0       	rjmp	.+164    	; 0x1f8 <TickFct_State_machine_1+0x15a>
		) {
			SM1_State = SM1_PERHAPS_4;
		}
		break;
		case SM1_UNLOCKED:
		if ((PINA & 0x80) == 0x80) {
 154:	cf 9b       	sbis	0x19, 7	; 25
 156:	04 c0       	rjmp	.+8      	; 0x160 <TickFct_State_machine_1+0xc2>
			SM1_State = SM1_LOCKED;
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 15e:	40 c0       	rjmp	.+128    	; 0x1e0 <TickFct_State_machine_1+0x142>
		}
		else if ((PINA == 0x04)
 160:	89 b3       	in	r24, 0x19	; 25
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	09 f0       	breq	.+2      	; 0x168 <TickFct_State_machine_1+0xca>
 166:	4b c0       	rjmp	.+150    	; 0x1fe <TickFct_State_machine_1+0x160>
		) {
			SM1_State = UNPERHAPS;
 168:	87 e0       	ldi	r24, 0x07	; 7
 16a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 16e:	4a c0       	rjmp	.+148    	; 0x204 <TickFct_State_machine_1+0x166>
		}
		break;
		case UNPERHAPS:
		if (PINA == 0x00 && ((PINA & 0x80) == 0x00)
 170:	89 b3       	in	r24, 0x19	; 25
 172:	81 11       	cpse	r24, r1
 174:	06 c0       	rjmp	.+12     	; 0x182 <TickFct_State_machine_1+0xe4>
 176:	cf 99       	sbic	0x19, 7	; 25
 178:	04 c0       	rjmp	.+8      	; 0x182 <TickFct_State_machine_1+0xe4>
		) {
			SM1_State = UNPERHAPS_2;
 17a:	88 e0       	ldi	r24, 0x08	; 8
 17c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 180:	44 c0       	rjmp	.+136    	; 0x20a <TickFct_State_machine_1+0x16c>
			
		}
		else if (PINA == 0x04 && ((PINA & 0x80) == 0x00)
 182:	89 b3       	in	r24, 0x19	; 25
 184:	84 30       	cpi	r24, 0x04	; 4
 186:	f1 f5       	brne	.+124    	; 0x204 <TickFct_State_machine_1+0x166>
 188:	89 b3       	in	r24, 0x19	; 25
 18a:	3c c0       	rjmp	.+120    	; 0x204 <TickFct_State_machine_1+0x166>
		) {
			SM1_State = UNPERHAPS;
		}
		break;
		case UNPERHAPS_2:
		if ((PINA == 0x01 || PINA == 0x80)
 18c:	89 b3       	in	r24, 0x19	; 25
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	19 f0       	breq	.+6      	; 0x198 <TickFct_State_machine_1+0xfa>
 192:	89 b3       	in	r24, 0x19	; 25
 194:	80 38       	cpi	r24, 0x80	; 128
 196:	21 f4       	brne	.+8      	; 0x1a0 <TickFct_State_machine_1+0x102>
		) {
			SM1_State = SM1_UNLOCKED;
 198:	86 e0       	ldi	r24, 0x06	; 6
 19a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 19e:	2f c0       	rjmp	.+94     	; 0x1fe <TickFct_State_machine_1+0x160>
		}
		else if (PINA == 0x02
 1a0:	89 b3       	in	r24, 0x19	; 25
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	29 f4       	brne	.+10     	; 0x1b0 <TickFct_State_machine_1+0x112>
		) {
			SM1_State = SM1_LOCKED;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			PORTB = 0x00;
 1ac:	18 ba       	out	0x18, r1	; 24
 1ae:	0b c0       	rjmp	.+22     	; 0x1c6 <TickFct_State_machine_1+0x128>
		}
		else if (PINA == 0x04){
 1b0:	89 b3       	in	r24, 0x19	; 25
 1b2:	84 30       	cpi	r24, 0x04	; 4
 1b4:	51 f5       	brne	.+84     	; 0x20a <TickFct_State_machine_1+0x16c>
			SM1_State = SM1_PERHAPS_4;
 1b6:	85 e0       	ldi	r24, 0x05	; 5
 1b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1bc:	1d c0       	rjmp	.+58     	; 0x1f8 <TickFct_State_machine_1+0x15a>
		}
		break;
		default:
		SM1_State = SM1_LOCKED;
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 1c4:	0d c0       	rjmp	.+26     	; 0x1e0 <TickFct_State_machine_1+0x142>
	} // Transitions

	switch(SM1_State) { // State actions
 1c6:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <_edata>
 1ca:	8e 2f       	mov	r24, r30
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	fc 01       	movw	r30, r24
 1d0:	31 97       	sbiw	r30, 0x01	; 1
 1d2:	e8 30       	cpi	r30, 0x08	; 8
 1d4:	f1 05       	cpc	r31, r1
 1d6:	d8 f4       	brcc	.+54     	; 0x20e <TickFct_State_machine_1+0x170>
 1d8:	ed 5c       	subi	r30, 0xCD	; 205
 1da:	ff 4f       	sbci	r31, 0xFF	; 255
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__tablejump2__>
		case SM1_LOCKED:
		PORTB = 0x00;
 1e0:	18 ba       	out	0x18, r1	; 24
		PORTC = 0x00;
 1e2:	15 ba       	out	0x15, r1	; 21
		break;
 1e4:	08 95       	ret
		case SM1_PERHAPS_1:
					PORTC = 0x01;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	85 bb       	out	0x15, r24	; 21
		break;
 1ea:	08 95       	ret
		case SM1_PERHAPS_2:
					PORTC = 0x02;
 1ec:	82 e0       	ldi	r24, 0x02	; 2
 1ee:	85 bb       	out	0x15, r24	; 21
		break;
 1f0:	08 95       	ret
		case SM1_PERHAPS_3:
					PORTC = 0x03;
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	85 bb       	out	0x15, r24	; 21
		break;
 1f6:	08 95       	ret
		case SM1_PERHAPS_4:
					PORTC = 0x07;
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	85 bb       	out	0x15, r24	; 21
		break;
 1fc:	08 95       	ret
		case SM1_UNLOCKED:
					PORTC = 0x04;
 1fe:	84 e0       	ldi	r24, 0x04	; 4
 200:	85 bb       	out	0x15, r24	; 21
		break;
 202:	08 95       	ret
		case UNPERHAPS:
					PORTC = 0x05;
 204:	85 e0       	ldi	r24, 0x05	; 5
 206:	85 bb       	out	0x15, r24	; 21
		break;
 208:	08 95       	ret
		case UNPERHAPS_2:
					PORTC = 0x06;
 20a:	86 e0       	ldi	r24, 0x06	; 6
 20c:	85 bb       	out	0x15, r24	; 21
		default: // ADD default behaviour below
		break;
	} // State actions

}
 20e:	08 95       	ret

00000210 <main>:

	//const unsigned int periodState_machine_1 = 1000; // 1000 ms default
	//TimerSet(periodState_machine_1);
	// TimerOn();
	
	SM1_State = START; // Initial state
 210:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	PORTB = 0; // Init outputs
 214:	18 ba       	out	0x18, r1	; 24

	while(1) {
		TickFct_State_machine_1();
 216:	0e 94 4f 00 	call	0x9e	; 0x9e <TickFct_State_machine_1>
 21a:	fd cf       	rjmp	.-6      	; 0x216 <main+0x6>

0000021c <__tablejump2__>:
 21c:	ee 0f       	add	r30, r30
 21e:	ff 1f       	adc	r31, r31
 220:	05 90       	lpm	r0, Z+
 222:	f4 91       	lpm	r31, Z
 224:	e0 2d       	mov	r30, r0
 226:	09 94       	ijmp

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
