
khuss001_lab2_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000921  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000056e  00000000  00000000  00000b65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031a  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002fd  00000000  00000000  00001434  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000416  00000000  00000000  00001731  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
	return ((x & (0x01 << k)) != 0);
}

int main(void)
{
   DDRA = 0x00; PORTA = 0xFF; // Configure port A's 8 pins as inputs
  6c:	1a ba       	out	0x1a, r1	; 26
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	8b bb       	out	0x1b, r24	; 27
   DDRC = 0xFF; PORTC = 0x00; // Configure port B's 8 pins as outputs
  72:	84 bb       	out	0x14, r24	; 20
  74:	15 ba       	out	0x15, r1	; 21
   unsigned char tmpC = 0x00; //variable for PORTA
   unsigned char tmpA = 0x00;
  76:	80 e0       	ldi	r24, 0x00	; 0
    while (1) 
    {
	tmpC = ((PINA & 0x0F));
  78:	99 b3       	in	r25, 0x19	; 25
		/*Setting the bits*/
		//PC0
		if ((PINA & 0x0F) >= 0x0D){
  7a:	29 b3       	in	r18, 0x19	; 25
  7c:	2f 70       	andi	r18, 0x0F	; 15
  7e:	30 e0       	ldi	r19, 0x00	; 0
  80:	2d 30       	cpi	r18, 0x0D	; 13
  82:	31 05       	cpc	r19, r1
  84:	0c f0       	brlt	.+2      	; 0x88 <main+0x1c>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  86:	81 60       	ori	r24, 0x01	; 1
		/*Setting the bits*/
		//PC0
		if ((PINA & 0x0F) >= 0x0D){
			tmpA = SetBit(tmpA, 0, 1);
		}
		if ((PINA & 0x0F) < 0x0D){
  88:	29 b3       	in	r18, 0x19	; 25
  8a:	2f 70       	andi	r18, 0x0F	; 15
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	2d 30       	cpi	r18, 0x0D	; 13
  90:	31 05       	cpc	r19, r1
  92:	0c f4       	brge	.+2      	; 0x96 <main+0x2a>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  94:	8e 7f       	andi	r24, 0xFE	; 254
		}
		if ((PINA & 0x0F) < 0x0D){
			tmpA = SetBit(tmpA, 0, 0);
		}
		//PC1
		if ((PINA & 0x0F) >= 0x0A){
  96:	29 b3       	in	r18, 0x19	; 25
  98:	2f 70       	andi	r18, 0x0F	; 15
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	2a 30       	cpi	r18, 0x0A	; 10
  9e:	31 05       	cpc	r19, r1
  a0:	0c f0       	brlt	.+2      	; 0xa4 <main+0x38>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  a2:	82 60       	ori	r24, 0x02	; 2
		}
		//PC1
		if ((PINA & 0x0F) >= 0x0A){
			tmpA = SetBit(tmpA, 1, 1);
		}
		if ((PINA & 0x0F) < 0x0A){
  a4:	29 b3       	in	r18, 0x19	; 25
  a6:	2f 70       	andi	r18, 0x0F	; 15
  a8:	30 e0       	ldi	r19, 0x00	; 0
  aa:	2a 30       	cpi	r18, 0x0A	; 10
  ac:	31 05       	cpc	r19, r1
  ae:	0c f4       	brge	.+2      	; 0xb2 <main+0x46>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  b0:	8d 7f       	andi	r24, 0xFD	; 253
		}
		if ((PINA & 0x0F) < 0x0A){
			tmpA = SetBit(tmpA, 1, 0);
		}
		//PC2
		if ((PINA & 0x0F) >= 0x07){
  b2:	29 b3       	in	r18, 0x19	; 25
  b4:	2f 70       	andi	r18, 0x0F	; 15
  b6:	30 e0       	ldi	r19, 0x00	; 0
  b8:	27 30       	cpi	r18, 0x07	; 7
  ba:	31 05       	cpc	r19, r1
  bc:	0c f0       	brlt	.+2      	; 0xc0 <main+0x54>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  be:	84 60       	ori	r24, 0x04	; 4
		}
		//PC2
		if ((PINA & 0x0F) >= 0x07){
			tmpA = SetBit(tmpA, 2, 1);
		}
		if ((PINA & 0x0F) < 0x07){
  c0:	29 b3       	in	r18, 0x19	; 25
  c2:	2f 70       	andi	r18, 0x0F	; 15
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	27 30       	cpi	r18, 0x07	; 7
  c8:	31 05       	cpc	r19, r1
  ca:	0c f4       	brge	.+2      	; 0xce <main+0x62>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  cc:	8b 7f       	andi	r24, 0xFB	; 251
		}
		if ((PINA & 0x0F) < 0x07){
			tmpA = SetBit(tmpA, 2, 0);
		}
		//PC4
		if ((PINA & 0x0F) >= 0x04){
  ce:	29 b3       	in	r18, 0x19	; 25
  d0:	2f 70       	andi	r18, 0x0F	; 15
  d2:	30 e0       	ldi	r19, 0x00	; 0
  d4:	24 30       	cpi	r18, 0x04	; 4
  d6:	31 05       	cpc	r19, r1
  d8:	0c f0       	brlt	.+2      	; 0xdc <main+0x70>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  da:	80 61       	ori	r24, 0x10	; 16
		}
		//PC4
		if ((PINA & 0x0F) >= 0x04){
			tmpA = SetBit(tmpA, 4, 1);
		}
		if ((PINA & 0x0F) < 0x04){
  dc:	29 b3       	in	r18, 0x19	; 25
  de:	2f 70       	andi	r18, 0x0F	; 15
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	24 30       	cpi	r18, 0x04	; 4
  e4:	31 05       	cpc	r19, r1
  e6:	0c f4       	brge	.+2      	; 0xea <main+0x7e>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  e8:	8f 7e       	andi	r24, 0xEF	; 239
		}
		if ((PINA & 0x0F) < 0x04){
			tmpA = SetBit(tmpA, 4, 0);
		}
		//PC3 
		if ((PINA & 0x0F) >= 0x05){
  ea:	29 b3       	in	r18, 0x19	; 25
  ec:	2f 70       	andi	r18, 0x0F	; 15
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	25 30       	cpi	r18, 0x05	; 5
  f2:	31 05       	cpc	r19, r1
  f4:	0c f0       	brlt	.+2      	; 0xf8 <main+0x8c>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
  f6:	88 60       	ori	r24, 0x08	; 8
		}
		//PC3 
		if ((PINA & 0x0F) >= 0x05){
			tmpA = SetBit(tmpA, 3, 1);
		}
		if ((PINA & 0x0F) < 0x05){
  f8:	29 b3       	in	r18, 0x19	; 25
  fa:	2f 70       	andi	r18, 0x0F	; 15
  fc:	30 e0       	ldi	r19, 0x00	; 0
  fe:	25 30       	cpi	r18, 0x05	; 5
 100:	31 05       	cpc	r19, r1
 102:	0c f4       	brge	.+2      	; 0x106 <main+0x9a>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 104:	87 7f       	andi	r24, 0xF7	; 247
		}
		if ((PINA & 0x0F) < 0x05){
			tmpA = SetBit(tmpA, 3, 0);
		}
		//PC5
		if ((PINA & 0x0F) >= 0x01){
 106:	99 b3       	in	r25, 0x19	; 25
 108:	9f 70       	andi	r25, 0x0F	; 15
 10a:	09 f0       	breq	.+2      	; 0x10e <main+0xa2>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 10c:	80 62       	ori	r24, 0x20	; 32
		}
		//PC5
		if ((PINA & 0x0F) >= 0x01){
			tmpA = SetBit(tmpA, 5, 1);
		}
		if ((PINA & 0x0F) < 0x01){
 10e:	99 b3       	in	r25, 0x19	; 25
 110:	9f 70       	andi	r25, 0x0F	; 15
 112:	09 f4       	brne	.+2      	; 0x116 <main+0xaa>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 114:	8f 7d       	andi	r24, 0xDF	; 223
		}
		if ((PINA & 0x0F) < 0x01){
			tmpA = SetBit(tmpA, 5, 0);
		}
		//PC6
		if ((PINA & 0x0F) <= 0x04){
 116:	29 b3       	in	r18, 0x19	; 25
 118:	2f 70       	andi	r18, 0x0F	; 15
 11a:	30 e0       	ldi	r19, 0x00	; 0
 11c:	25 30       	cpi	r18, 0x05	; 5
 11e:	31 05       	cpc	r19, r1
 120:	0c f4       	brge	.+2      	; 0x124 <main+0xb8>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 122:	80 64       	ori	r24, 0x40	; 64
		}
		//PC6
		if ((PINA & 0x0F) <= 0x04){
			tmpA = SetBit(tmpA, 6, 1);
		}
		if ((PINA & 0x0F) > 0x04){
 124:	29 b3       	in	r18, 0x19	; 25
 126:	2f 70       	andi	r18, 0x0F	; 15
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	25 30       	cpi	r18, 0x05	; 5
 12c:	31 05       	cpc	r19, r1
 12e:	0c f0       	brlt	.+2      	; 0x132 <main+0xc6>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 130:	8f 7b       	andi	r24, 0xBF	; 191
		}
		if ((PINA & 0x0F) > 0x04){
			tmpA = SetBit(tmpA, 6, 0);
		}
		//PC7
		if (GetBit(PINA, 4) && GetBit(PINA, 5) && ~(GetBit(PINA, 6)))
 132:	cc 9b       	sbis	0x19, 4	; 25
 134:	04 c0       	rjmp	.+8      	; 0x13e <main+0xd2>
 136:	cd 9b       	sbis	0x19, 5	; 25
 138:	02 c0       	rjmp	.+4      	; 0x13e <main+0xd2>
 13a:	99 b3       	in	r25, 0x19	; 25
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 13c:	80 68       	ori	r24, 0x80	; 128
		//PC7
		if (GetBit(PINA, 4) && GetBit(PINA, 5) && ~(GetBit(PINA, 6)))
		{
			tmpA = SetBit(tmpA, 7, 1);
		}
		if ((GetBit(PINA, 4) && GetBit(PINA, 5) && ~(GetBit(PINA, 6))) == 0)
 13e:	cc 9b       	sbis	0x19, 4	; 25
 140:	05 c0       	rjmp	.+10     	; 0x14c <main+0xe0>
 142:	cd 9b       	sbis	0x19, 5	; 25
 144:	03 c0       	rjmp	.+6      	; 0x14c <main+0xe0>
 146:	99 b3       	in	r25, 0x19	; 25
		{
			tmpA = SetBit(tmpA, 7, 0);
		}
		PORTC = tmpA;
 148:	85 bb       	out	0x15, r24	; 21
		}
 14a:	96 cf       	rjmp	.-212    	; 0x78 <main+0xc>
 */ 

#include <avr/io.h>
// Bit-access function
unsigned char SetBit(unsigned char x, unsigned char k, unsigned char b) {
	return (b ? x | (0x01 << k) : x & ~(0x01 << k));
 14c:	8f 77       	andi	r24, 0x7F	; 127
 14e:	fc cf       	rjmp	.-8      	; 0x148 <main+0xdc>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
