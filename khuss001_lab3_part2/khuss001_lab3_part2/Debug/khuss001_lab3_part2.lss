
khuss001_lab3_part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ca  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  00000260  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000290  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000060a  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000554  00000000  00000000  000008fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002a9  00000000  00000000  00000e52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  000010fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000341  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001471  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ec       	ldi	r30, 0xCA	; 202
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 36       	cpi	r26, 0x67	; 103
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  8a:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Tick>:
unsigned short count = 0;
enum States { START, SM1_RESET, SM1_ON, SM1_DECREASE, SM1_INCREASE } state;

void Tick(){

	switch(state){ // Transitions
  92:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <state>
  96:	82 30       	cpi	r24, 0x02	; 2
  98:	f1 f0       	breq	.+60     	; 0xd6 <Tick+0x44>
  9a:	28 f4       	brcc	.+10     	; 0xa6 <Tick+0x14>
  9c:	88 23       	and	r24, r24
  9e:	51 f0       	breq	.+20     	; 0xb4 <Tick+0x22>
  a0:	81 30       	cpi	r24, 0x01	; 1
  a2:	61 f0       	breq	.+24     	; 0xbc <Tick+0x2a>
  a4:	7d c0       	rjmp	.+250    	; 0x1a0 <Tick+0x10e>
  a6:	83 30       	cpi	r24, 0x03	; 3
  a8:	09 f4       	brne	.+2      	; 0xac <Tick+0x1a>
  aa:	46 c0       	rjmp	.+140    	; 0x138 <Tick+0xa6>
  ac:	84 30       	cpi	r24, 0x04	; 4
  ae:	09 f4       	brne	.+2      	; 0xb2 <Tick+0x20>
  b0:	5d c0       	rjmp	.+186    	; 0x16c <Tick+0xda>
  b2:	76 c0       	rjmp	.+236    	; 0x1a0 <Tick+0x10e>
      case START:
      state = SM1_RESET;
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
      break;
  ba:	75 c0       	rjmp	.+234    	; 0x1a6 <Tick+0x114>
      case SM1_RESET:
      if (PINA != 0x03) {
  bc:	89 b3       	in	r24, 0x19	; 25
  be:	83 30       	cpi	r24, 0x03	; 3
  c0:	21 f0       	breq	.+8      	; 0xca <Tick+0x38>
	      state = SM1_ON;
  c2:	82 e0       	ldi	r24, 0x02	; 2
  c4:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
  c8:	74 c0       	rjmp	.+232    	; 0x1b2 <Tick+0x120>
      }
      else if (PINA = 0x03) {
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	89 bb       	out	0x19, r24	; 25
	      state = SM1_RESET;
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
  d4:	68 c0       	rjmp	.+208    	; 0x1a6 <Tick+0x114>
      }
      break;
      case SM1_ON:
      if (PINA == 0x00) {
  d6:	89 b3       	in	r24, 0x19	; 25
  d8:	88 23       	and	r24, r24
  da:	09 f4       	brne	.+2      	; 0xde <Tick+0x4c>
  dc:	6a c0       	rjmp	.+212    	; 0x1b2 <Tick+0x120>
	      state = SM1_ON;
      }
      else if (PINA == 0x03) {
  de:	89 b3       	in	r24, 0x19	; 25
  e0:	83 30       	cpi	r24, 0x03	; 3
  e2:	21 f4       	brne	.+8      	; 0xec <Tick+0x5a>
	      state = SM1_RESET;
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
  ea:	5d c0       	rjmp	.+186    	; 0x1a6 <Tick+0x114>
      }
      else if (((PINA == 0x01) && count < max)) {
  ec:	89 b3       	in	r24, 0x19	; 25
  ee:	81 30       	cpi	r24, 0x01	; 1
  f0:	79 f4       	brne	.+30     	; 0x110 <Tick+0x7e>
  f2:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
  f6:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
  fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
  fe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 102:	28 17       	cp	r18, r24
 104:	39 07       	cpc	r19, r25
 106:	20 f4       	brcc	.+8      	; 0x110 <Tick+0x7e>
	      state = SM1_INCREASE;
 108:	84 e0       	ldi	r24, 0x04	; 4
 10a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
 10e:	08 95       	ret
      }
      else if (((PINA == 0x02) && count > min)) {
 110:	89 b3       	in	r24, 0x19	; 25
 112:	82 30       	cpi	r24, 0x02	; 2
 114:	09 f0       	breq	.+2      	; 0x118 <Tick+0x86>
 116:	4d c0       	rjmp	.+154    	; 0x1b2 <Tick+0x120>
 118:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
 11c:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
 120:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <min>
 124:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <min+0x1>
 128:	82 17       	cp	r24, r18
 12a:	93 07       	cpc	r25, r19
 12c:	08 f0       	brcs	.+2      	; 0x130 <Tick+0x9e>
 12e:	41 c0       	rjmp	.+130    	; 0x1b2 <Tick+0x120>
	      state = SM1_DECREASE;
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
 136:	08 95       	ret
      }
      break;
      case SM1_DECREASE:
      if (PINA == 0x00) {
 138:	89 b3       	in	r24, 0x19	; 25
 13a:	81 11       	cpse	r24, r1
 13c:	0d c0       	rjmp	.+26     	; 0x158 <Tick+0xc6>
	      state = SM1_ON;
 13e:	82 e0       	ldi	r24, 0x02	; 2
 140:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
	      count--;
 144:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 148:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 14c:	01 97       	sbiw	r24, 0x01	; 1
 14e:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 152:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 156:	2d c0       	rjmp	.+90     	; 0x1b2 <Tick+0x120>
      }
      else if ((PINA == 0x02)) {
 158:	89 b3       	in	r24, 0x19	; 25
 15a:	82 30       	cpi	r24, 0x02	; 2
 15c:	69 f1       	breq	.+90     	; 0x1b8 <Tick+0x126>
	      state = SM1_DECREASE;
      }
      else if (PINA == 0x03) {
 15e:	89 b3       	in	r24, 0x19	; 25
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	51 f5       	brne	.+84     	; 0x1b8 <Tick+0x126>
	      state = SM1_RESET;
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
 16a:	1d c0       	rjmp	.+58     	; 0x1a6 <Tick+0x114>
      }
      break;
      case SM1_INCREASE:
      if (PINA == 0x00) {
 16c:	89 b3       	in	r24, 0x19	; 25
 16e:	81 11       	cpse	r24, r1
 170:	0d c0       	rjmp	.+26     	; 0x18c <Tick+0xfa>
	      state = SM1_ON;
 172:	82 e0       	ldi	r24, 0x02	; 2
 174:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
	      count++;
 178:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 17c:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <__data_end+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <__data_end+0x1>
 186:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <__data_end>
 18a:	13 c0       	rjmp	.+38     	; 0x1b2 <Tick+0x120>
      }
      else if (PINA == 0x01) {
 18c:	89 b3       	in	r24, 0x19	; 25
 18e:	81 30       	cpi	r24, 0x01	; 1
 190:	99 f0       	breq	.+38     	; 0x1b8 <Tick+0x126>
	      state = SM1_INCREASE;
      }
      else if (PINA == 0x03) {
 192:	89 b3       	in	r24, 0x19	; 25
 194:	83 30       	cpi	r24, 0x03	; 3
 196:	81 f4       	brne	.+32     	; 0x1b8 <Tick+0x126>
	      state = SM1_RESET;
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
 19e:	03 c0       	rjmp	.+6      	; 0x1a6 <Tick+0x114>
      }
      break;
      default:
      state = SM1_RESET;
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <state>
	}//Transitions

	switch(state){ // state actions
      case SM1_RESET:
      count = 0;
 1a6:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__data_end+0x1>
 1aa:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__data_end>
      PORTC = count;
 1ae:	15 ba       	out	0x15, r1	; 21
      break;
 1b0:	08 95       	ret
      case SM1_ON:
      PORTC = count;
 1b2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <__data_end>
 1b6:	85 bb       	out	0x15, r24	; 21
 1b8:	08 95       	ret

000001ba <main>:
      break;
	}// State actions
}

void main(){
	PORTC = 0x00; // Initialize outputs
 1ba:	15 ba       	out	0x15, r1	; 21
	state = START; // Indicates initial call
 1bc:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <state>
	while(1) {Tick();}
 1c0:	0e 94 49 00 	call	0x92	; 0x92 <Tick>
 1c4:	fd cf       	rjmp	.-6      	; 0x1c0 <main+0x6>

000001c6 <_exit>:
 1c6:	f8 94       	cli

000001c8 <__stop_program>:
 1c8:	ff cf       	rjmp	.-2      	; 0x1c8 <__stop_program>
